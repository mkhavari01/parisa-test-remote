# -*- coding: utf-8 -*-
"""recom_content.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rgQcHDrDWknv6fr8CWrpsEODuY0DCdRb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas._libs.tslibs.offsets import YearBegin
from scipy.spatial.distance import pdist,squareform,cdist

data1 = pd.read_csv('food11.csv', index_col='recipe_id')
data=pd.read_csv('rates (1).csv')
pd.set_option('display.max_rows',None)
pd.set_option('display.max_columns',None)
data1

data

#information about the recipe dataset
data1.info()

# Check for duplicate index values
duplicate_rows = data1.duplicated(keep=False)
duplicates_df = data1[duplicate_rows]

print(duplicates_df)

#check missing data
missing_data = data1.isin(["NaN", None, "non", "none"]).sum()
#check
data1.isna().sum()

#Estimate the number of users and the number of food recipes
n_users= data['user_id'].nunique()
print("n_users is",n_users)
n_recipes= data1.index.nunique()
print("n_recipes is",n_recipes)

#Estimation of scoring interval
data['ratings']=data['ratings']
min_rating=min(data['ratings'])
max_rating=max(data['ratings'])
print('[',min_rating,',',max_rating,']')

#Normalization
min_value = data1['calories'].min()
max_value = data1['calories'].max()

data1['calories'] = (data1['calories'] - min_value) / (max_value - min_value)

print(data1['calories'])


columns = ['title', 'calories'] + list(data1.columns[4:40])  # Including food categories

# Create the new dataset with selected columns
new_dataset =data1[columns]

new_dataset.head()

# categories List
def get_all_categories():
    return categories
categories= get_all_categories()
categories

# categories List
# categories List
def get_all_categories():
    return categories
categories= get_all_categories()
categories

# Load foods Data
def load_foods_data():

    # Load DataFrame
    data1 = pd.read_csv('food11.csv', index_col='recipe_id')

    # Initialize categories List
    categories_list = []

    # Iterate over Rows and Add categories Columns
    for idx, item in data1.iterrows():
        categories = item.categories.split('|')
        for category in categories:
            c = category.lower()

            # This is not a category
            if c == '(no categories listed)':
                continue

            # Check if column 'c' exists
            if not c in data1.columns:
                data1[c] = 0
                categories_list.append(c)

            # Set the Value
            data1.loc[idx,c] = 1

    # Sort categories List
    categories_list = sorted(categories_list)
    #normalization
    min_value = data1['calories'].min()
    max_value = data1['calories'].max()

    data1['calories'] = (data1['calories'] - min_value) / (max_value - min_value)

    # Selected Columns of the DataFrame
    columns = ['title', 'calories'] + categories_list

    # Select Columns
    data1 = data1[columns]

    # Return Final DataFrame
    return data1
foods = load_foods_data()
foods

def load_ratings_data():

    # Load DataFrame
    data=pd.read_csv('rates (1).csv')

    # Return Final DataFrame
    return data

# Load the Ratings Matrix (Pivot Table)
def load_ratings_matrix():

    # Load Ratings DataFrame
    data = load_ratings_data()

    # Get Pivot Table
    matrixrate= pd.pivot_table(data, index='user_id', columns='recipe_id', values='ratings')

    # Return Pivot Table
    return matrixrate
matrixrate=load_ratings_matrix()
matrixrate

def get_similarity_matrix():

    # Load foods
    foods = load_foods_data()
    # calories Similarity
    Calory = foods['calories'].to_numpy().reshape(-1, 1)
    DistanceCalory = pdist(Calory)
    sigma = 10
    SimilarityCalory = np.exp(-(DistanceCalory/sigma)**2)
    SimilarityCalory = squareform(SimilarityCalory)

    # categories Similarity
    categor = foods[categories]
    DistanceCategor = pdist(categor, metric='cosine')
    SimilarityCategory = 1 - DistanceCategor
    SimilarityCategory = squareform(SimilarityCategory)

    # Total Similarity
    WeightCategory = 0.85
    weightcalory = 1 - WeightCategory
    TotalSimilarity = WeightCategory*SimilarityCategory + weightcalory *SimilarityCalory
    sdf = pd.DataFrame(TotalSimilarity, index=foods.index, columns=foods.index)
    sdf.fillna(0, inplace=True)
    return sdf
similaritymatrix=get_similarity_matrix()
similaritymatrix

def content_based_recom(user_id, matrixrate, similaritymatrix, n = 5):


    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index
    fav_foods = rate[rate == 4].index

    # Calculate Total Similarity
    totalsimilarity = 0
    for i in fav_foods:
        totalsimilarity += similaritymatrix[i]

    # Exclude food with Rating
    totalsimilarity[has_rating] = 0

    # Recommendations
    recommendations1 = totalsimilarity.sort_values(ascending=False).index[:n]
    recommendations1 = recommendations1.to_list()
    return recommendations1
recommendations1= content_based_recom(user_id=40, matrixrate=matrixrate, similaritymatrix=similaritymatrix, n=3)
foods.loc[recommendations1]

user_id=40
rate = matrixrate.loc[user_id]
has_rating = rate[rate >= 0].index
fav_foods = rate[rate == 4].index
user=foods.loc[fav_foods]
user
user.mean()

data[data['recipe_id']==678]['ratings'].describe()

def content_based_recom_2(user_id, matrixrate, similaritymatrix, n = 5):

    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index

    # Estimate Ratings
    A = 0
    B = 0
    for j in has_rating:
        A += similaritymatrix[j]*rate[j]
        B += similaritymatrix[j]

    r_hat = A/B
    r_hat.fillna(0, inplace=True)

    # Exclude foods with Rating
    r_hat[has_rating] = 0

    # Recommendations
    recommendations2 = r_hat.sort_values(ascending=False).index[:n]
    recommendations2 = recommendations2.to_list()
    return recommendations2
recommendations2= content_based_recom_2(user_id=40, matrixrate=matrixrate, similaritymatrix=similaritymatrix, n=3)
foods.loc[recommendations2]

# Content-based Recommendation (3rd method)
def content_based_recom_3(user_id, matrixrate, foods, n = 5):
    # Remove Non-numerical Data
    items = foods.drop(columns='title')

    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index

    # Calculate Overall User Preference
    A = 0
    B = 0
    for j in has_rating:
        A += rate[j]*items.loc[j]
        B += rate[j]

    P = A/B

    # calory Similarity
    Calory1 = [[P['calories']]]
    Calory2 = items['calories'].to_numpy().reshape(-1,1)
    DistanceCalory = cdist(Calory1, Calory2)
    sigma = 1
    SimilarityCalory = np.exp(-(DistanceCalory /sigma)**2)

    # category Similarity
    Categor1 = P[categories].to_numpy().reshape(1,-1)
    Categor2 = items[categories]
    DistanceCategory = cdist(Categor1, Categor1)
    SimilarityCategory = 1 - DistanceCategory

    # Overall Similarity
    WeightCategory = 0.85
    weightcalory = 1 - WeightCategory
    TotalSimilarity = WeightCategory*SimilarityCategory + weightcalory *SimilarityCalory
    # Get Results
    totalsimilarity = pd.Series(TotalSimilarity[0], index=foods.index)
    totalsimilarity[has_rating] = 0
    totalsimilarity.fillna(0, inplace=True)
    recommendations3 = totalsimilarity.sort_values(ascending=False).index[:n]
    recommendations3 = recommendations3.to_list()
    return recommendations3
recommendations3=content_based_recom_3(user_id=40,matrixrate=matrixrate, foods=foods, n=3)
foods.loc[recommendations3]



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas._libs.tslibs.offsets import YearBegin
from scipy.spatial.distance import pdist,squareform,cdist
# categories List
categories=['آبگوشت', 'آش', 'استیک', 'اشکنه', 'برانچ', 'بورانی', 'تخم مرغ', 'جوجه کباب', 'خوراک حبوبات', 'خوراک سبزیجات', 'خوراک مرغ',
                      'خوراک گوشت', 'خورشت', 'دریایی', 'دستورات مکمل', 'دسر', 'سالاد', 'ساندویچ و اسنک', 'سوخاری', 'سوپ', 'سیب زمینی', 'غذای سبک',
                      'لازانیا', 'نوشیدنی سرد', 'نوشیدنی گرم', 'وعده آزاد', 'پاستا', 'پلو و دمی', 'پیتزا', 'پیش غذا', 'کباب', 'کتلت - شامی', 'کوفته_کبه', 'کوکو', 'کیک','گراتن']

# food categories
def get_all_categories():
    return categories

# Load foods Data
def load_foods_data():

    # Load DataFrame
    data1 = pd.read_csv('food11.csv', index_col='recipe_id')

    # Initialize categories List
    categories_list = []

    # Iterate over Rows and Add categories Columns
    for idx, item in data1.iterrows():
        categories = item.categories.split('|')
        for category in categories:
            c = category.lower()

            # This is not a category
            if c == '(no categories listed)':
                continue

            # Check if column 'c' exists
            if not c in data1.columns:
                data1[c] = 0
                categories_list.append(c)

            # Set the Value
            data1.loc[idx,c] = 1

    # Sort categories List
    categories_list = sorted(categories_list)

    # Selected Columns of the DataFrame
    columns = ['title', 'calories'] + categories_list

    # Select Columns
    data1 = data1[columns]

    # Return Final DataFrame
    return data1
foods = load_foods_data()
# Load Ratings Data
def load_ratings_data():

    # Load DataFrame
    data=pd.read_csv('rates (1).csv')

    # Return Final DataFrame
    return data

# Load the Ratings Matrix (Pivot Table)
def load_ratings_matrix():

    # Load Ratings DataFrame
    data = load_ratings_data()

    # Get Pivot Table
    matrixrate= pd.pivot_table(data, index='user_id', columns='recipe_id', values='ratings')

    # Return Pivot Table
    return matrixrate
matrixrate=load_ratings_matrix()

def get_similarity_matrix():

    # Load foods
    foods = load_foods_data()

    # calories Similarity
    Calory = foods['calories'].to_numpy().reshape(-1, 1)
    DistanceCalory = pdist(Calory)
    sigma = 10
    SimilarityCalory = np.exp(-(DistanceCalory/sigma)**2)
    SimilarityCalory = squareform(SimilarityCalory)

    # categories Similarity
    categor = foods[categories]
    DistanceCategor = pdist(categor, metric='cosine')
    SimilarityCategory = 1 - DistanceCategor
    SimilarityCategory = squareform(SimilarityCategory)

    # Total Similarity
    WeightCategory = 0.85
    weightcalory = 1 - WeightCategory
    TotalSimilarity = WeightCategory*SimilarityCategory + weightcalory *SimilarityCalory
    sdf = pd.DataFrame(TotalSimilarity, index=foods.index, columns=foods.index)
    sdf.fillna(0, inplace=True)
    return sdf
similaritymatrix=get_similarity_matrix()

# Content-based Recommendation
#recommendation based on total similarity
def content_based_recom(user_id, matrixrate, similaritymatrix, n = 5):


    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index
    fav_foods = rate[rate == 4].index

    # Calculate Total Similarity
    totalsimilarity = 0
    for i in fav_foods:
        totalsimilarity += similaritymatrix[i]

    # Exclude food with Rating
    totalsimilarity[has_rating] = 0

    # Recommendations
    recommendations1 = totalsimilarity.sort_values(ascending=False).index[:n]
    recommendations1 = recommendations1.to_list()
    return recommendations1
recommendations1= content_based_recom(user_id=10, matrixrate=matrixrate, similaritymatrix=similaritymatrix, n=5)
foods.loc[recommendations1]

# Content-based Recommendation (2nd method)
# Calculating the average weight and estimating the points of the items that do not have points
def content_based_recom_2(user_id, matrixrate, similaritymatrix, n = 5):

    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index

    # Estimate Ratings
    A = 0
    B = 0
    for j in has_rating:
        A += similaritymatrix[j]*rate[j]
        B += similaritymatrix[j]

    r_hat = A/B
    r_hat.fillna(0, inplace=True)

    # Exclude foods with Rating
    r_hat[has_rating] = 0

    # Recommendations
    recommendations2 = r_hat.sort_values(ascending=False).index[:n]
    recommendations2 = recommendations2.to_list()
    return recommendations2
recommendations2= content_based_recom_2(user_id=10, matrixrate=matrixrate, similaritymatrix=similaritymatrix, n=3)
#foods.loc[recs2]


# Content-based Recommendation (3rd method)
def content_based_recom_3(user_id, matrixrate, foods, n = 5):
    # Remove Non-numerical Data
    items = foods.drop(columns='title')

    # Ratings of the User
    rate = matrixrate.loc[user_id]
    has_rating = rate[rate >= 0].index

    # Calculate Overall User Preference
    A = 0
    B = 0
    for j in has_rating:
        A += rate[j]*items.loc[j]
        B += rate[j]

    P = A/B

    # calory Similarity
    Calory1 = [[P['calories']]]
    Calory2 = items['calories'].to_numpy().reshape(-1,1)
    DistanceCalory = cdist(Calory1, Calory2)
    sigma = 10
    SimilarityCalory = np.exp(-(DistanceCalory /sigma)**2)

    # category Similarity
    Categor1 = P[categories].to_numpy().reshape(1,-1)
    Categor2 = items[categories]
    DistanceCategory = cdist(Categor1, Categor1)
    SimilarityCategory = 1 - DistanceCategory

    # Overall Similarity
    WeightCategory = 0.85
    weightcalory = 1 - WeightCategory
    TotalSimilarity = WeightCategory*SimilarityCategory + weightcalory *SimilarityCalory
    # Get Results
    totalsimilarity = pd.Series(TotalSimilarity[0], index=foods.index)
    totalsimilarity[has_rating] = 0
    totalsimilarity.fillna(0, inplace=True)
    recommendations3 = totalsimilarity.sort_values(ascending=False).index[:n]
    recommendations3 = recommendations3.to_list()
    return recommendations3
recommendations3=content_based_recom_3(user_id=53,matrixrate=matrixrate, foods=foods, n=3)
#foods.loc[recs3]

def recommend_foods_for_users(matrixrate, similaritymatrix, foods, n=3):
    recommendations = {}

    # for every user
    for user_id in matrixrate.index:
        #run recommendation method for every method
        recs1= content_based_recom_3(user_id, matrixrate,foods , n)
        recommendations[user_id] = recs1

    return recommendations

# import recommendation function
recommendations = recommend_foods_for_users(matrixrate, similaritymatrix, foods, n=3)

# display recommendation for every user
for user_id, recs1 in recommendations.items():
    print(f"برای کاربر با شناسه {user_id}، پیشنهادات غذایی به شرح زیر است:")
    for rec in recs1:
        print(foods.loc[rec]['title'])
    print('-----------')